<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_FRDM-K82F" name="FRDM-K82F" brief="This is SDK version 2.8.0 manifest file. It describes the content of the FRDM-K82F and additional settings for tools that support SDK version 2.8.0" format_version="3.6" api_version="2.0.0" configuration="168864b391ebc193e4c6bb7f53a9a388" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.6.xsd">
  <!--Timestamp (UTC): 2020-11-25 02:17:44.368506-->
  <!--This manifest is generated based on sdk repo commit: 5df5022c7426188357d0e69b4ff94b58f0d1b557-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="twrk80f150m"/>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso280" name="MCUXpresso280" version="2.8.0" revision="366 2020-07-21"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings/>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.2.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
  </toolchains>
  <boards>
    <board id="frdmk82f" name="FRDM-K82F" href="https://www.nxp.com/pip/FRDM-K82F" version="1.0.0" package="MK82FN256VLL15">
      <description>Freedom Development Platform for Kinetis K82, K81, and K80 MCUs</description>
      <image path="MIR/marketing_data/1.0/boards/images" type="image">
        <files mask="12-FRDM-K82F.gif"/>
      </image>
      <examples>
        <example id="frdmk82f_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/adc16" path="boards/frdmk82f/driver_examples/adc16/continuous_edma">
          <external path="boards/frdmk82f/driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma.xml"/>
          </external>
        </example>
        <example id="frdmk82f_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/adc16" path="boards/frdmk82f/driver_examples/adc16/interrupt">
          <external path="boards/frdmk82f/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_adc16_low_power_async_edma" name="adc16_low_power_async_edma" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/adc16_low_power_async_edma">
          <external path="boards/frdmk82f/demo_apps/adc16_low_power_async_edma" type="xml">
            <files mask="adc16_low_power_async_edma.xml"/>
          </external>
        </example>
        <example id="frdmk82f_adc16_low_power_async_edma_peripheral" name="adc16_low_power_async_edma_peripheral" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/adc16_low_power_async_edma_peripheral">
          <external path="boards/frdmk82f/demo_apps/adc16_low_power_async_edma_peripheral" type="xml">
            <files mask="adc16_low_power_async_edma_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_adc16_low_power_peripheral" name="adc16_low_power_peripheral" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/adc16_low_power_peripheral">
          <external path="boards/frdmk82f/demo_apps/adc16_low_power_peripheral" type="xml">
            <files mask="adc16_low_power_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/adc16" path="boards/frdmk82f/driver_examples/adc16/polling">
          <external path="boards/frdmk82f/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling.xml"/>
          </external>
        </example>
        <example id="frdmk82f_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/bubble_peripheral">
          <external path="boards/frdmk82f/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/cmp" path="boards/frdmk82f/driver_examples/cmp/interrupt">
          <external path="boards/frdmk82f/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/cmp" path="boards/frdmk82f/driver_examples/cmp/polling">
          <external path="boards/frdmk82f/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_dspi_edma_b2b_transfer_master" name="cmsis_dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="boards/frdmk82f/cmsis_driver_examples/dspi/edma_b2b_transfer/master">
          <external path="boards/frdmk82f/cmsis_driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_dspi_edma_b2b_transfer_slave" name="cmsis_dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="boards/frdmk82f/cmsis_driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="boards/frdmk82f/cmsis_driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_dspi_int_b2b_transfer_master" name="cmsis_dspi_int_b2b_transfer_master" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="boards/frdmk82f/cmsis_driver_examples/dspi/int_b2b_transfer/master">
          <external path="boards/frdmk82f/cmsis_driver_examples/dspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_dspi_int_b2b_transfer_slave" name="cmsis_dspi_int_b2b_transfer_slave" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="boards/frdmk82f/cmsis_driver_examples/dspi/int_b2b_transfer/slave">
          <external path="boards/frdmk82f/cmsis_driver_examples/dspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_i2c_edma_b2b_transfer_master" name="cmsis_i2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/frdmk82f/cmsis_driver_examples/i2c/edma_b2b_transfer/master">
          <external path="boards/frdmk82f/cmsis_driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_i2c_edma_b2b_transfer_slave" name="cmsis_i2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/frdmk82f/cmsis_driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="boards/frdmk82f/cmsis_driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_i2c_int_b2b_transfer_master" name="cmsis_i2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/frdmk82f/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/frdmk82f/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_i2c_int_b2b_transfer_slave" name="cmsis_i2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/frdmk82f/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/frdmk82f/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_i2c_read_accel_value_transfer" name="cmsis_i2c_read_accel_value_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_read_accel_value example shows how to use CMSIS I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/frdmk82f/cmsis_driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmk82f/cmsis_driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="cmsis_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/frdmk82f/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/frdmk82f/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/frdmk82f/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmk82f/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_cmt" name="cmt" brief="The cmt example shows the simplest way to use CMT driver.In this example, the CMT is work as Time mode and used to modulation 11 bit numbers of data.The CMT is configured to generate a 40000hz carrier generator signal through a modulator gateconfigured with different mark/space time period to represent bit 1 and bit 0. The modulated data rate is 9600.Note, The end of cycle interrupt provides a means for the user to reload new mark/space valuesinto the modulator data registers. Modulator data register updates will take effect at the end of the current modulation cycle. The CMT internal down-counter and space period register areupdated at the end of every modulation cycle, irrespective of interrupt handling and the stateof the interrupt. so please make sure the IRQ handler process is shorter than the modulationcycle to ensure the new mark/space counter is prepared before each end of modulation cycle." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/cmt">
          <external path="boards/frdmk82f/driver_examples/cmt" type="xml">
            <files mask="cmt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/crc">
          <external path="boards/frdmk82f/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dac_adc_peripheral" name="dac_adc_peripheral" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/dac_adc_peripheral">
          <external path="boards/frdmk82f/demo_apps/dac_adc_peripheral" type="xml">
            <files mask="dac_adc_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac" path="boards/frdmk82f/driver_examples/dac/basic">
          <external path="boards/frdmk82f/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac" path="boards/frdmk82f/driver_examples/dac/buffer_interrupt">
          <external path="boards/frdmk82f/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dac_continuous_pdb_edma" name="dac_continuous_pdb_edma" brief="The demo shows how to use the PDB to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PDB is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.while read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac" path="boards/frdmk82f/driver_examples/dac/continuous_pdb_edma">
          <external path="boards/frdmk82f/driver_examples/dac/continuous_pdb_edma" type="xml">
            <files mask="dac_continuous_pdb_edma.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_edma_b2b_transfer_master" name="dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/edma_b2b_transfer/master">
          <external path="boards/frdmk82f/driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="dspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_edma_b2b_transfer_slave" name="dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="dspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_half_duplex_edma_master" name="dspi_half_duplex_edma_master" brief="The dspi_half_duplex_edma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sendsa piece of data to slave, and receive a piece of data from slave. This example checks if the data received fromslave is correct.Besides, master will transfer in EDMA way. " toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/edma/master">
          <external path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/edma/master" type="xml">
            <files mask="dspi_half_duplex_edma_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_half_duplex_edma_slave" name="dspi_half_duplex_edma_slave" brief="The dspi_half_duplex_edma_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses edma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/edma/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/edma/slave" type="xml">
            <files mask="dspi_half_duplex_edma_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_half_duplex_int_master" name="dspi_half_duplex_int_master" brief="The dspi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer in interrupt way. " toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/int/master">
          <external path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/int/master" type="xml">
            <files mask="dspi_half_duplex_int_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_half_duplex_int_slave" name="dspi_half_duplex_int_slave" brief="The dspi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/int/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/int/slave" type="xml">
            <files mask="dspi_half_duplex_int_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_half_duplex_polling_master" name="dspi_half_duplex_polling_master" brief="The dspi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends apiece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. Besides, master will transfer in polling way. " toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/polling/master">
          <external path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/polling/master" type="xml">
            <files mask="dspi_half_duplex_polling_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_half_duplex_polling_slave" name="dspi_half_duplex_polling_slave" brief="The dspi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/polling/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/half_duplex_transfer/polling/slave" type="xml">
            <files mask="dspi_half_duplex_polling_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_interrupt" name="dspi_interrupt" brief="The dspi_interrupt example shows how to use DSPI driver in interrupt way:In this example , one dspi instance used as DSPI master and another dspi instance used as DSPI slave in the same board.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/interrupt">
          <external path="boards/frdmk82f/driver_examples/dspi/interrupt" type="xml">
            <files mask="dspi_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_interrupt_b2b_master" name="dspi_interrupt_b2b_master" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_master.c' includes the DSPI master code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b/master">
          <external path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b/master" type="xml">
            <files mask="dspi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_interrupt_b2b_slave" name="dspi_interrupt_b2b_slave" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the DSPI slave code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b/slave" type="xml">
            <files mask="dspi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_interrupt_b2b_transfer_master" name="dspi_interrupt_b2b_transfer_master" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b_transfer/master">
          <external path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_interrupt_b2b_transfer_slave" name="dspi_interrupt_b2b_transfer_slave" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_polling_b2b_transfer_master" name="dspi_polling_b2b_transfer_master" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/polling_b2b_transfer/master">
          <external path="boards/frdmk82f/driver_examples/dspi/polling_b2b_transfer/master" type="xml">
            <files mask="dspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_dspi_polling_b2b_transfer_slave" name="dspi_polling_b2b_transfer_slave" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dspi" path="boards/frdmk82f/driver_examples/dspi/polling_b2b_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/dspi/polling_b2b_transfer/slave" type="xml">
            <files mask="dspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/ecompass_peripheral">
          <external path="boards/frdmk82f/demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="boards/frdmk82f/driver_examples/edma/memory_to_memory">
          <external path="boards/frdmk82f/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="frdmk82f_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="boards/frdmk82f/driver_examples/edma/scatter_gather">
          <external path="boards/frdmk82f/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/ewm">
          <external path="boards/frdmk82f/driver_examples/ewm" type="xml">
            <files mask="ewm.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_i2c_interrupt_i2c_transfer" name="flexio_i2c_interrupt_i2c_transfer" brief="The flexio_i2c_interrupt example shows how to use flexio i2c master driver in interrupt way:In this example, a flexio simulated i2c master connect to an I2C slave." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/i2c/interrupt_i2c_transfer">
          <external path="boards/frdmk82f/driver_examples/flexio/i2c/interrupt_i2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_i2c_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_i2c_read_accel_value_transfer" name="flexio_i2c_read_accel_value_transfer" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/i2c/read_accel_value_transfer">
          <external path="boards/frdmk82f/driver_examples/flexio/i2c/read_accel_value_transfer" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/pwm">
          <external path="boards/frdmk82f/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_spi_edma_dspi_transfer_master" name="flexio_spi_edma_dspi_transfer_master" brief="The flexio_spi_master_edma_dspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a dspi slave ." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/spi/edma_dspi_transfer/master">
          <external path="boards/frdmk82f/driver_examples/flexio/spi/edma_dspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_dspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_spi_edma_dspi_transfer_slave" name="flexio_spi_edma_dspi_transfer_slave" brief="The flexio_spi_slave_edma_dspi_master example shows how to use flexio spi slave driver in dma way:In this example, a flexio simulated slave connect to a dspi master." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/spi/edma_dspi_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/flexio/spi/edma_dspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_dspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_spi_int_dspi_transfer_master" name="flexio_spi_int_dspi_transfer_master" brief="The flexio_spi_master_interrupt_dspi_slave example shows how to use flexio spi master driver in interrupt way:In this example, a flexio simulated master connect to a dspi slave ." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/spi/int_dspi_transfer/master">
          <external path="boards/frdmk82f/driver_examples/flexio/spi/int_dspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_dspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_spi_int_dspi_transfer_slave" name="flexio_spi_int_dspi_transfer_slave" brief="The flexio_spi_slave_interrupt_dspi_master example shows how to use flexio spi slave driver in interrupt way:In this example, a flexio simulated slave connect to a dspi master." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/spi/int_dspi_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/flexio/spi/int_dspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_dspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/uart/edma_transfer">
          <external path="boards/frdmk82f/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/uart/int_rb_transfer">
          <external path="boards/frdmk82f/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/uart/interrupt_transfer">
          <external path="boards/frdmk82f/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/frdmk82f/driver_examples/flexio/uart/polling_transfer">
          <external path="boards/frdmk82f/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/combine_pwm">
          <external path="boards/frdmk82f/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/dual_edge_capture">
          <external path="boards/frdmk82f/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/input_capture">
          <external path="boards/frdmk82f/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/output_compare">
          <external path="boards/frdmk82f/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/pwm_twochannel">
          <external path="boards/frdmk82f/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_quad_decoder" name="ftm_quad_decoder" brief="This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/ftm_quad_decoder">
          <external path="boards/frdmk82f/demo_apps/ftm_quad_decoder" type="xml">
            <files mask="ftm_quad_decoder.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_quad_decoder_peripheral" name="ftm_quad_decoder_peripheral" brief="This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/ftm_quad_decoder_peripheral">
          <external path="boards/frdmk82f/demo_apps/ftm_quad_decoder_peripheral" type="xml">
            <files mask="ftm_quad_decoder_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/simple_pwm">
          <external path="boards/frdmk82f/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/frdmk82f/driver_examples/ftm/timer">
          <external path="boards/frdmk82f/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/frdmk82f/driver_examples/gpio/input_interrupt">
          <external path="boards/frdmk82f/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/frdmk82f/driver_examples/gpio/led_output">
          <external path="boards/frdmk82f/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="frdmk82f_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/hello_world">
          <external path="boards/frdmk82f/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="frdmk82f_hello_world_qspi" name="hello_world_qspi" brief="The Hello World QSPI demo application provides a sanity check for new SDK build environments and board bring up. Itprints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is to show how tocompile SDK applications to run and boot from QSPI flash or a QSPI alias region.This example can generate two different demos using a different linker file and a startup file:Program boot from QSPI region.Program boot from QSPI alias region (if the chip supports QSPI alias region)." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/hello_world_qspi">
          <external path="boards/frdmk82f/demo_apps/hello_world_qspi" type="xml">
            <files mask="hello_world_qspi.xml"/>
          </external>
        </example>
        <example id="frdmk82f_hello_world_qspi_alias" name="hello_world_qspi_alias" brief="The Hello World QSPI demo application provides a sanity check for new SDK build environments and board bring up. Itprints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is to show how tocompile SDK applications to run and boot from QSPI flash or a QSPI alias region.This example can generate two different demos using a different linker file and a startup file:Program boot from QSPI region.Program boot from QSPI alias region (if the chip supports QSPI alias region)." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/hello_world_qspi_alias">
          <external path="boards/frdmk82f/demo_apps/hello_world_qspi_alias" type="xml">
            <files mask="hello_world_qspi_alias.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_edma_b2b_transfer_master" name="i2c_edma_b2b_transfer_master" brief="The i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/edma_b2b_transfer/master">
          <external path="boards/frdmk82f/driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="i2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_edma_b2b_transfer_slave" name="i2c_edma_b2b_transfer_slave" brief="The i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="i2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_interrupt" name="i2c_interrupt" brief="The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/interrupt">
          <external path="boards/frdmk82f/driver_examples/i2c/interrupt" type="xml">
            <files mask="i2c_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/frdmk82f/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/frdmk82f/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/frdmk82f/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk82f_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/frdmk82f/driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmk82f/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/led_blinky">
          <external path="boards/frdmk82f/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/lptmr">
          <external path="boards/frdmk82f/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lpuart_edma_rb_transfer" name="lpuart_edma_rb_transfer" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/frdmk82f/driver_examples/lpuart/edma_rb_transfer">
          <external path="boards/frdmk82f/driver_examples/lpuart/edma_rb_transfer" type="xml">
            <files mask="lpuart_edma_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/frdmk82f/driver_examples/lpuart/edma_transfer">
          <external path="boards/frdmk82f/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/frdmk82f/driver_examples/lpuart/interrupt">
          <external path="boards/frdmk82f/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/frdmk82f/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/frdmk82f/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/frdmk82f/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmk82f/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/frdmk82f/driver_examples/lpuart/polling">
          <external path="boards/frdmk82f/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ltc_aes" name="ltc_aes" brief="This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, AES-CCM, and XCBC-MAC algorithm." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ltc" path="boards/frdmk82f/driver_examples/ltc/aes">
          <external path="boards/frdmk82f/driver_examples/ltc/aes" type="xml">
            <files mask="ltc_aes.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ltc_aes_edma" name="ltc_aes_edma" brief="This project is a demonstration program that uses the KSDK software for encryption/decryption sample data using EDMA forAES-CBC algorithm." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ltc" path="boards/frdmk82f/driver_examples/ltc/aes_edma">
          <external path="boards/frdmk82f/driver_examples/ltc/aes_edma" type="xml">
            <files mask="ltc_aes_edma.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ltc_des" name="ltc_des" brief="This project is a demonstration program that uses the KSDK software for encryption/decryption somedata using DES-cbc and DES3-cbc method." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ltc" path="boards/frdmk82f/driver_examples/ltc/des">
          <external path="boards/frdmk82f/driver_examples/ltc/des" type="xml">
            <files mask="ltc_des.xml"/>
          </external>
        </example>
        <example id="frdmk82f_ltc_des_edma" name="ltc_des_edma" brief="This project is a demonstration program that uses the KSDK software for encryption/decryption some data using EDMA for DES-cbc and DES3-cbc algorithm." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ltc" path="boards/frdmk82f/driver_examples/ltc/des_edma">
          <external path="boards/frdmk82f/driver_examples/ltc/des_edma" type="xml">
            <files mask="ltc_des_edma.xml"/>
          </external>
        </example>
        <example id="frdmk82f_mcg_fei_blpi" name="mcg_fei_blpi" brief="The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mcg" path="boards/frdmk82f/driver_examples/mcg/fei_blpi">
          <external path="boards/frdmk82f/driver_examples/mcg/fei_blpi" type="xml">
            <files mask="mcg_fei_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk82f_mcg_pee_blpe" name="mcg_pee_blpe" brief="The pee_bple example shows how to use MCG driver to change from PEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt; BLPE    Change back BLPE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mcg" path="boards/frdmk82f/driver_examples/mcg/pee_blpe">
          <external path="boards/frdmk82f/driver_examples/mcg/pee_blpe" type="xml">
            <files mask="mcg_pee_blpe.xml"/>
          </external>
        </example>
        <example id="frdmk82f_mcg_pee_blpi" name="mcg_pee_blpi" brief="The pee_bpli example shows how to use MCG driver to change from PEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt;FBE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FBE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mcg" path="boards/frdmk82f/driver_examples/mcg/pee_blpi">
          <external path="boards/frdmk82f/driver_examples/mcg/pee_blpi" type="xml">
            <files mask="mcg_pee_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk82f_pdb_adc16_trigger" name="pdb_adc16_trigger" brief="The pdb_adc16_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would begenerated and sent to the ADC module.In this example, the ADC16 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/frdmk82f/driver_examples/pdb/adc16_trigger">
          <external path="boards/frdmk82f/driver_examples/pdb/adc16_trigger" type="xml">
            <files mask="pdb_adc16_trigger.xml"/>
          </external>
        </example>
        <example id="frdmk82f_pdb_dac_trigger" name="pdb_dac_trigger" brief="The pdb_dac_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's &quot;milestone&quot; and set the user-defined value for it.The DAC's &quot;milestone&quot; is called as &quot;interval&quot;. Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB, the buffer read pointer increases." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/frdmk82f/driver_examples/pdb/dac_trigger">
          <external path="boards/frdmk82f/driver_examples/pdb/dac_trigger" type="xml">
            <files mask="pdb_dac_trigger.xml"/>
          </external>
        </example>
        <example id="frdmk82f_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/frdmk82f/driver_examples/pdb/delay_interrupt">
          <external path="boards/frdmk82f/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk82f_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flash" path="boards/frdmk82f/driver_examples/flash/pflash">
          <external path="boards/frdmk82f/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="frdmk82f_pit" name="pit" brief="The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/pit">
          <external path="boards/frdmk82f/driver_examples/pit" type="xml">
            <files mask="pit.xml"/>
          </external>
        </example>
        <example id="frdmk82f_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/power_manager">
          <external path="boards/frdmk82f/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="frdmk82f_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/power_mode_switch">
          <external path="boards/frdmk82f/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="frdmk82f_qspi_edma_transfer" name="qspi_edma_transfer" brief="The qspi_edma example shows how to use qspi driver with EDMA:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/qspi" path="boards/frdmk82f/driver_examples/qspi/edma_transfer">
          <external path="boards/frdmk82f/driver_examples/qspi/edma_transfer" type="xml">
            <files mask="qspi_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_qspi_polling_transfer" name="qspi_polling_transfer" brief="The qspi_polling example shows how to use qspi driver with polling:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct.Notice: While do program, it is not suggested to make the flash write frequency bigger than the core clock frequency.In some tool chain's Debug version, this may cause core do not have enough speed to send data to flash.The flash write frequency equals to QSPI working frequency plus data line number. For example, if QSPI working in 48MHz,program command uses quad mode, the write frequency is 48MHz * 4 = 192MHz." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/qspi" path="boards/frdmk82f/driver_examples/qspi/polling_transfer">
          <external path="boards/frdmk82f/driver_examples/qspi/polling_transfer" type="xml">
            <files mask="qspi_polling_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/rtc">
          <external path="boards/frdmk82f/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="frdmk82f_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/rtc_func">
          <external path="boards/frdmk82f/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="frdmk82f_rtc_func_peripheral" name="rtc_func_peripheral" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/rtc_func_peripheral">
          <external path="boards/frdmk82f/demo_apps/rtc_func_peripheral" type="xml">
            <files mask="rtc_func_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk82f_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/frdmk82f/demo_apps/shell">
          <external path="boards/frdmk82f/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="frdmk82f_sysmpu" name="sysmpu" brief="The SYSMPU example defines protected/unprotected memory region for the core access.First, the SYSMPU will capture the hardware information and show it on theterminal. Then, a memory region is configured as the non-writable region. Thebus fault interrupt is enabled to report the memory protection interrupt eventfor this non-writable region. If an operation writes to this region, the busfault interrupt happens. Then the bus fault interrupt handler provides aprevention alert by outputting a message on terminal, then the write rightswill be given to this region for core access. After the write access enabled,the writing to the region becomes successful. When the bus fault happen, thedetails of the error information will be captured and printed on the terminal.This example provides the terminal input control to give the example show for several regions access test. Just press any key to the terminal when theterminal show &quot;Press any key to continue&quot;." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/sysmpu">
          <external path="boards/frdmk82f/driver_examples/sysmpu" type="xml">
            <files mask="sysmpu.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/combine_pwm">
          <external path="boards/frdmk82f/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/dual_edge_capture">
          <external path="boards/frdmk82f/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/input_capture">
          <external path="boards/frdmk82f/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/output_compare">
          <external path="boards/frdmk82f/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/pwm_twochannel">
          <external path="boards/frdmk82f/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/simple_pwm">
          <external path="boards/frdmk82f/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/frdmk82f/driver_examples/tpm/timer">
          <external path="boards/frdmk82f/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer.xml"/>
          </external>
        </example>
        <example id="frdmk82f_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/trng" path="boards/frdmk82f/driver_examples/trng/random">
          <external path="boards/frdmk82f/driver_examples/trng/random" type="xml">
            <files mask="trng_random.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tsi_v4_low_power_mode" name="tsi_v4_low_power_mode" brief="The tsi_v4_low_power example shows how to use TSI_V4 driver in low power modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Hardware-Trigger scan using interrupt method to wakeup from low power   modes through pad touch;3. Note: you can select which low power mode you want to enter into." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tsi_v4" path="boards/frdmk82f/driver_examples/tsi_v4/low_power">
          <external path="boards/frdmk82f/driver_examples/tsi_v4/low_power" type="xml">
            <files mask="tsi_v4_low_power_mode.xml"/>
          </external>
        </example>
        <example id="frdmk82f_tsi_v4_normal_mode" name="tsi_v4_normal_mode" brief="The tsi_v4_normal example shows how to use TSI_V4 driver in normal modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tsi_v4" path="boards/frdmk82f/driver_examples/tsi_v4/normal">
          <external path="boards/frdmk82f/driver_examples/tsi_v4/normal" type="xml">
            <files mask="tsi_v4_normal_mode.xml"/>
          </external>
        </example>
        <example id="frdmk82f_vref_example" name="vref_example" brief="In this example, the adc16 module is initiealized and used to measure the VREF output voltage. So, it cannot use interal VREF as the reference voltage. Then, user should configure the VREF output pin as the ADC16's sample input. When running the project, it will firstly measure the VREF output voltage within the default (factory) trim value. Then, it will measure the VREF output voltage under different trim value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/vref" path="boards/frdmk82f/driver_examples/vref">
          <external path="boards/frdmk82f/driver_examples/vref" type="xml">
            <files mask="vref_example.xml"/>
          </external>
        </example>
        <example id="frdmk82f_wdog" name="wdog" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/frdmk82f/driver_examples/wdog">
          <external path="boards/frdmk82f/driver_examples/wdog" type="xml">
            <files mask="wdog.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MK82FN256xxx15" name="MK82F25615" version="1.0.0" full_name="MK82FN256xxx15" family="K8x" platform="Kinetis">
      <description>Kinetis K82-150 MHz HW Cryptographic Co-Processor &amp; QuadSPI Microcontrollers (MCUs) based on ARM Cortex-M4 Core</description>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MK82FN256xxx15" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MK82FN256xxx15" name="PROGRAM_FLASH" addr="00000000" size="00040000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MK82FN256xxx15" name="SRAM_UPPER" addr="20000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MK82FN256xxx15" name="SRAM_LOWER" addr="1fff0000" size="00010000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="256" ram_size_kb="256"/>
      <package id="MK82FN256CAx15" name="MK82FN256CAx15"/>
      <package id="MK82FN256VDC15" name="MK82FN256VDC15"/>
      <package id="MK82FN256VLL15" name="MK82FN256VLL15"/>
      <package id="MK82FN256VLQ15" name="MK82FN256VLQ15"/>
      <evaluation_boards>
        <evaluation_board name="frdmk82f"/>
        <evaluation_board name="twrk80f150m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MK82FN256xxx15" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MK82FN256xxx15" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MK82FN256xxx15" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MK82FN256xxx15">
              <driverBinary type="binary">
                <files mask="FTFA_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk82f.MK82F25615" name="frdmk82f" brief="Board_project_template frdmk82f" version="1.0.0" full_name="Board_project_template frdmk82f" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MK82F25615"/>
          <component_dependency value="component.lpuart_adapter.MK82F25615"/>
          <component_dependency value="platform.drivers.port.MK82F25615"/>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="utility.debug_console.MK82F25615"/>
          <component_dependency value="component.serial_manager.MK82F25615"/>
          <component_dependency value="platform.drivers.gpio.MK82F25615"/>
          <component_dependency value="platform.drivers.smc.MK82F25615"/>
          <component_dependency value="device.MK82F25615_startup.MK82F25615"/>
          <component_dependency value="platform.drivers.i2c.MK82F25615"/>
        </all>
      </dependencies>
      <source path="boards/frdmk82f/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/frdmk82f/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MK82F25615" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MK82FN256xxx15" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MK82F25615"/>
          <component_dependency value="platform.Include_dsp.MK82F25615"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="Driver/DriverTemplates" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK82F25615" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK82F25615" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK82F25615" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK82F25615" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK82F25615" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK82F25615" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK82F25615" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK82F25615" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK82F25615" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK82F25615" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK82F25615" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK82F25615" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK82F25615" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK82F25615" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MK82F25615" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MK82FN256xxx15" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK82F25615"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MK82F25615" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MK82FN256xxx15" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MK82F25615" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MK82F25615"/>
          <component_dependency value="platform.Include_dsp.MK82F25615"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MK82F25615" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MK82FN256xxx15" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="COPY_BSD_License.MK82F25615" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MK82FN256xxx15" user_visible="true" type="other">
      <source path="." target_path="src" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MK82F25615.MK82F25615" name="MK82F25615" brief="Devices_project_template MK82F25615" version="1.0.0" full_name="Devices_project_template MK82F25615" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MK82F25615"/>
          <component_dependency value="component.lpuart_adapter.MK82F25615"/>
          <component_dependency value="platform.drivers.port.MK82F25615"/>
          <component_dependency value="platform.drivers.gpio.MK82F25615"/>
          <component_dependency value="platform.drivers.smc.MK82F25615"/>
          <component_dependency value="device.MK82F25615_startup.MK82F25615"/>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="utility.debug_console.MK82F25615"/>
          <component_dependency value="component.serial_manager.MK82F25615"/>
          <component_dependency value="platform.drivers.clock.MK82F25615"/>
          <component_dependency value="platform.drivers.i2c.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MK82F25615/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MK82F25615" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
          <component_dependency value="platform.drivers.dmamux.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MK82F25615" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MK82FN256xxx15" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MK82F25615" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.timer_manager.MK82F25615"/>
          <component_dependency value="component.gpio_adapter.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.common_task.MK82F25615" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.osa.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.crc_adapter.MK82F25615" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.crc.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="crc_adapter.c"/>
      </source>
    </component>
    <component id="component.flash_adapter.MK82F25615" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.flash.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/internal_flash" target_path="component/internal_flash" type="c_include">
        <files mask="flash.h"/>
      </source>
      <source path="components/internal_flash" target_path="component/internal_flash" type="src">
        <files mask="flash_adapter.c"/>
      </source>
    </component>
    <component id="component.ftm_adapter.MK82F25615" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.ftm.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="ftm_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.gpio_adapter.MK82F25615" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MK82F25615"/>
          <component_dependency value="platform.drivers.port.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_adapter.c"/>
      </source>
    </component>
    <component id="component.led.MK82F25615" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.timer_manager.MK82F25615"/>
          <component_dependency value="component.gpio_adapter.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MK82F25615" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lptmr_adapter.MK82F25615" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.lptmr.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lptmr_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MK82F25615" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.lpuart.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.mem_manager.MK82F25615" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.lists.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.osa.MK82F25615" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.lists.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MK82F25615" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MK82F25615" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MK82F25615" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.lists.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.panic.MK82F25615" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="utility.debug_console.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pit_adapter.MK82F25615" name="pit_adapter" brief="Component pit_adapter" version="1.0.0" full_name="Component pit_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.pit.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="pit_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.pwm_ftm_adapter.MK82F25615" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.ftm.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_ftm_adapter.c"/>
      </source>
    </component>
    <component id="component.pwm_tpm_adapter.MK82F25615" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.tpm.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MK82F25615" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.lists.MK82F25615"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MK82F25615"/>
            <component_dependency value="component.serial_manager_swo.MK82F25615"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_swo.MK82F25615" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.serial_manager.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_swo.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_swo.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MK82F25615" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MK82F25615"/>
          <component_dependency value="platform.drivers.lpuart.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.MK82F25615" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MK82F25615" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="component.lists.MK82F25615"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MK82F25615"/>
            <component_dependency value="component.pit_adapter.MK82F25615"/>
            <component_dependency value="component.lptmr_adapter.MK82F25615"/>
            <component_dependency value="component.ftm_adapter.MK82F25615"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.tpm_adapter.MK82F25615" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.tpm.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.trng_adapter.MK82F25615" name="trng_adapter" brief="Component trng_adapter" version="1.0.0" full_name="Component trng_adapter" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.trng.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/rng" target_path="component/rng" type="c_include">
        <files mask="rng.h"/>
      </source>
      <source path="components/rng" target_path="component/rng" type="src">
        <files mask="trng_adapter.c"/>
      </source>
    </component>
    <component id="device.MK82F25615_CMSIS.MK82F25615" name="MK82F25615_CMSIS" brief="Device MK82F25615_cmsis" version="1.0.0" full_name="Device MK82F25615_cmsis" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615" target_path="device" type="c_include">
        <files mask="MK82F25615.h"/>
        <files mask="MK82F25615_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MK82F25615_debugger.MK82F25615" name="MK82F25615_debugger" brief="Device MK82F25615_debugger" version="1.0.0" full_name="Device MK82F25615_debugger" devices="MK82FN256xxx15" user_visible="true" type="debugger">
      <source path="devices/MK82F25615" target_path="MK82F25615" type="xml">
        <files mask="MK82F25615.xml"/>
      </source>
    </component>
    <component id="platform.devices.MK82F25615_linker.MK82F25615" name="MK82F25615_linker" brief="Device MK82F25615_linker" version="1.0.0" full_name="Device MK82F25615_linker" devices="MK82FN256xxx15" user_visible="true" type="linker">
      <source toolchain="armgcc" path="devices/MK82F25615/gcc" target_path="MK82F25615/gcc" type="linker">
        <files mask="MK82FN256xxx15_flash.ld"/>
        <files mask="MK82FN256xxx15_ram.ld"/>
      </source>
    </component>
    <component id="device.MK82F25615_startup.MK82F25615" name="MK82F25615_startup" brief="Device MK82F25615_startup" version="1.1.0" full_name="Device MK82F25615_startup" devices="MK82FN256xxx15" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="armgcc" path="devices/MK82F25615/gcc" target_path="startup" type="asm_include">
        <files mask="startup_MK82F25615.S"/>
      </source>
      <source path="devices/MK82F25615" target_path="device" type="src">
        <files mask="system_MK82F25615.c"/>
      </source>
      <source path="devices/MK82F25615" target_path="device" type="c_include">
        <files mask="system_MK82F25615.h"/>
      </source>
    </component>
    <component id="docs.MK82F25615.MK82F25615" name="MK82F25615" brief="Docs mk82f25615" version="1.0.0" full_name="Docs mk82f25615" devices="MK82FN256xxx15" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-K82F.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MK82F25615" name="adc" brief="ADC16 Driver" version="2.1.0" full_name="ADC16 Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
    </component>
    <component id="platform.drivers.cache_lmem.MK82F25615" name="cache lmem" brief="CACHE LMEM Driver" version="2.0.4" full_name="CACHE LMEM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
    </component>
    <component id="driver.camera-common.MK82F25615" name="camera-common" brief="Driver camera-common" version="1.0.0" full_name="Driver camera-common" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="driver.video-common.MK82F25615"/>
      </dependencies>
      <source path="components/video/camera" target_path="video" type="c_include">
        <files mask="fsl_camera.h"/>
      </source>
    </component>
    <component id="driver.camera-device-common.MK82F25615" name="camera-device-common" brief="Driver camera-device-common" version="1.0.0" full_name="Driver camera-device-common" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.camera-common.MK82F25615"/>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/video/camera/device" target_path="video" type="c_include">
        <files mask="fsl_camera_device.h"/>
      </source>
    </component>
    <component id="driver.camera-device-ov7670.MK82F25615" name="camera-device-ov7670" brief="Driver camera-device-ov7670" version="1.0.0" full_name="Driver camera-device-ov7670" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MK82F25615"/>
          <component_dependency value="driver.camera-common.MK82F25615"/>
          <component_dependency value="driver.camera-device-common.MK82F25615"/>
          <component_dependency value="driver.camera-device-sccb.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/video/camera/device/ov7670" target_path="video" type="src">
        <files mask="fsl_ov7670.c"/>
      </source>
      <source path="components/video/camera/device/ov7670" target_path="video" type="c_include">
        <files mask="fsl_ov7670.h"/>
      </source>
    </component>
    <component id="driver.camera-device-sccb.MK82F25615" name="camera-device-sccb" brief="Driver camera-device-sccb" version="1.0.0" full_name="Driver camera-device-sccb" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="components/video/camera/device/sccb" target_path="video" type="src">
        <files mask="fsl_sccb.c"/>
      </source>
      <source path="components/video/camera/device/sccb" target_path="video" type="c_include">
        <files mask="fsl_sccb.h"/>
      </source>
    </component>
    <component id="driver.camera-receiver-common.MK82F25615" name="camera-receiver-common" brief="Driver camera-receiver-common" version="1.0.0" full_name="Driver camera-receiver-common" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MK82F25615"/>
          <component_dependency value="driver.camera-common.MK82F25615"/>
        </all>
      </dependencies>
      <source path="components/video/camera/receiver" target_path="video" type="c_include">
        <files mask="fsl_camera_receiver.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MK82F25615" name="clock" brief="Clock Driver" version="2.3.0" full_name="Clock Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp.MK82F25615" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi_cmsis.MK82F25615" name="dspi_cmsis" brief="DSPI CMSIS Driver" version="2.0.0" full_name="DSPI CMSIS Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dspi_edma.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK82F25615"/>
          <component_dependency value="RTE_Device.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi_cmsis.c"/>
      </source>
      <source path="devices/MK82F25615/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_cmsis_edma.MK82F25615" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.2" full_name="I2C CMSIS EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c_edma.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK82F25615"/>
          <component_dependency value="RTE_Device.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/MK82F25615/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_edma.MK82F25615" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" full_name="LPUART CMSIS EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_edma.MK82F25615"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK82F25615"/>
          <component_dependency value="RTE_Device.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MK82F25615/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmt.MK82F25615" name="cmt" brief="CMT Driver" version="2.0.3" full_name="CMT Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmt.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmt.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MK82F25615" name="common" brief="COMMON Driver" version="2.2.4" full_name="COMMON Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MK82F25615"/>
          <component_dependency value="device.MK82F25615_CMSIS.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.crc.MK82F25615" name="crc" brief="CRC Driver" version="2.0.2" full_name="CRC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac.MK82F25615" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MK82F25615" name="dmamux" brief="DMAMUX Driver" version="2.0.4" full_name="DMAMUX Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi.MK82F25615" name="dspi" brief="DSPI Driver" version="2.2.4" full_name="DSPI Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi_edma.MK82F25615" name="dspi_edma" brief="DSPI Driver" version="2.2.4" full_name="DSPI_EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dspi.MK82F25615"/>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.edma.MK82F25615" name="edma" brief="EDMA Driver" version="2.3.2" full_name="EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.dmamux.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ewm.MK82F25615" name="ewm" brief="EWM Driver" version="2.0.3" full_name="EWM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MK82F25615" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexbus.MK82F25615" name="flexbus" brief="FLEXBUS Driver" version="2.1.1" full_name="FLEXBUS Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexbus.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexbus.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MK82F25615" name="flexio" brief="FLEXIO Driver" version="2.0.3" full_name="FLEXIO Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_camera.MK82F25615" name="flexio_camera" brief="FLEXIO Driver" version="2.1.3" full_name="FLEXIO CAMERA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_camera.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_camera.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_camera_edma.MK82F25615" name="flexio_camera_edma" brief="FLEXIO CAMERA EDMA Driver" version="2.1.3" full_name="FLEXIO CAMERA EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_camera.MK82F25615"/>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_camera_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_camera_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MK82F25615" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s.MK82F25615" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s_edma.MK82F25615" name="flexio_i2s_edma" brief="FLEXIO I2S EDMA Driver" version="2.1.7" full_name="FLEXIO I2S EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
          <component_dependency value="platform.drivers.flexio_i2s.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi.MK82F25615" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MK82F25615" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.2.0" full_name="FLEXIO SPI EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
          <component_dependency value="platform.drivers.flexio_spi.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MK82F25615" name="flexio_uart" brief="FLEXIO UART Driver" version="2.2.0" full_name="FLEXIO UART Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MK82F25615" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.2.0" full_name="FLEXIO UART EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.MK82F25615"/>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ftm.MK82F25615" name="ftm" brief="FTM Driver" version="2.2.3" full_name="FTM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
    </component>
    <component id="driver.fxos8700cq.MK82F25615" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="board_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="components/fxos8700cq" target_path="accel" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source path="components/fxos8700cq" target_path="accel" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MK82F25615" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c.MK82F25615" name="i2c" brief="I2C Driver" version="2.0.8" full_name="I2C Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_edma.MK82F25615" name="i2c_edma" brief="I2C Driver" version="2.0.8" full_name="I2C EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MK82F25615"/>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.llwu.MK82F25615" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
    </component>
    <component id="platform.drivers.lmem.MK82F25615" name="lmem" brief="LMEM Driver" version="2.1.2" full_name="LMEM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_lmem_cache.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lmem_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MK82F25615" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MK82F25615" name="lpuart" brief="LPUART Driver" version="2.3.0" full_name="LPUART Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_edma.MK82F25615" name="lpuart_edma" brief="LPUART Driver" version="2.3.0" full_name="LPUART Edma Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
          <component_dependency value="platform.drivers.lpuart.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ltc.MK82F25615" name="ltc" brief="LTC Driver" version="2.0.12" full_name="LTC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_ltc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ltc.h"/>
      </source>
    </component>
    <component id="platform.drivers.ltc_dpa.MK82F25615" name="ltc_dpa" brief="LTC Driver" version="2.0.8" full_name="LTC DPA Driver" devices="MK82FN256xxx15" user_visible="true" type="driver">
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ltc_dpa.h"/>
      </source>
    </component>
    <component id="platform.drivers.ltc_edma.MK82F25615" name="ltc_edma" brief="LTC Driver" version="2.0.10" full_name="LTC EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.ltc.MK82F25615"/>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_ltc_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ltc_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdb.MK82F25615" name="pdb" brief="PDB Driver" version="2.0.4" full_name="PDB Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
    </component>
    <component id="platform.drivers.pit.MK82F25615" name="pit" brief="PIT Driver" version="2.0.3" full_name="PIT Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MK82F25615" name="pmc" brief="PMC Driver" version="2.0.3" full_name="PMC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MK82F25615" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.qspi.MK82F25615" name="qspi" brief="QSPI Driver" version="2.2.1" full_name="QSPI Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_qspi.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_qspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.qspi_edma.MK82F25615" name="qspi_edma" brief="QSPI Driver" version="2.2.1" full_name="QSPI EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.qspi.MK82F25615"/>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_qspi_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_qspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MK82F25615" name="rcm" brief="RCM Driver" version="2.0.4" full_name="RCM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MK82F25615" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MK82F25615" name="sai" brief="SAI Driver" version="2.3.1" full_name="SAI Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_edma.MK82F25615" name="sai_edma" brief="SAI EDMA Driver" version="2.3.1" full_name="SAI EDMA Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK82F25615"/>
          <component_dependency value="platform.drivers.sai.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.sdhc.MK82F25615" name="sdhc" brief="SDHC Driver" version="2.1.11" full_name="SDHC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_sdhc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sdhc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sdramc.MK82F25615" name="sdramc" brief="SDRAMC Driver" version="2.1.1" full_name="SDRAMC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_sdramc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sdramc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MK82F25615" name="sim" brief="SIM Driver" version="2.1.1" full_name="SIM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.smartcard_emvsim.MK82F25615" name="smartcard_emvsim" brief="SMARTCARD EMVSIM Driver" version="2.2.2" full_name="SMARTCARD EMVSIM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smartcard.h"/>
        <files mask="fsl_smartcard_emvsim.h"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_smartcard_emvsim.c"/>
      </source>
    </component>
    <component id="platform.drivers.smartcard_phy_emvsim.MK82F25615" name="smartcard_phy_emvsim" brief="SMARTCARD PHY EMVSIM, use only one SMARTCARD PHY in the project" version="2.2.2" full_name="SMARTCARD PHY EMVSIM" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.smartcard_emvsim.MK82F25615"/>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smartcard_phy.h"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_smartcard_phy_emvsim.c"/>
      </source>
    </component>
    <component id="platform.drivers.smartcard_phy_tda8035.MK82F25615" name="smartcard_phy_tda8035" brief="SMARTCARD PHY TDA8035, use only one SMARTCARD PHY in the project" version="2.2.2" full_name="SMARTCARD PHY TDA8035" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
          <component_dependency value="platform.drivers.smartcard_emvsim.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smartcard_phy.h"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_smartcard_phy_tda8035.c"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MK82F25615" name="smc" brief="SMC Driver" version="2.0.7" full_name="SMC Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sysmpu.MK82F25615" name="sysmpu" brief="SYSMPU Driver" version="2.2.3" full_name="SYSMPU Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_sysmpu.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sysmpu.h"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MK82F25615" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
    </component>
    <component id="platform.drivers.trng.MK82F25615" name="trng" brief="TRNG Driver" version="2.0.10" full_name="TRNG Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
    </component>
    <component id="platform.drivers.tsi_v4.MK82F25615" name="tsi_v4" brief="TSI Driver" version="2.1.3" full_name="TSI Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_tsi_v4.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tsi_v4.h"/>
      </source>
    </component>
    <component id="driver.video-common.MK82F25615" name="video-common" brief="Driver video-common" version="1.0.0" full_name="Driver video-common" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="components/video" target_path="video" type="src">
        <files mask="fsl_video_common.c"/>
      </source>
      <source path="components/video" target_path="video" type="c_include">
        <files mask="fsl_video_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.vref.MK82F25615" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog.MK82F25615" name="wdog" brief="WDOG Driver" version="2.0.1" full_name="WDOG Driver" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source path="devices/MK82F25615/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MK82F25615" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MK82FN256xxx15" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.nxp.mflash.frdmk82f.MK82F25615" name="mflash frdmk82" brief="mflash frdmk82" version="1.0.0" full_name="mflash frdmk82" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="platform.drivers.qspi.MK82F25615"/>
      </dependencies>
      <source path="middleware/mflash/frdmk82f" target_path="mflash/frdmk82f" type="src">
        <files mask="mflash_drv.c"/>
        <files mask="mflash_file.c"/>
      </source>
      <source path="middleware/mflash/frdmk82f" target_path="mflash/frdmk82f" type="c_include">
        <files mask="mflash_drv.h"/>
        <files mask="mflash_file.h"/>
      </source>
    </component>
    <component id="middleware.nxp.mflash_file.MK82F25615" name="mflash file" brief="mflash file" version="1.0.0" full_name="static allocated file system for mflash" devices="MK82FN256xxx15" user_visible="false" type="middleware"/>
    <component id="middleware.sdmmc.common.MK82F25615" name="sdmmc_common" brief="Middleware sdmmc common" version="2.3.0" full_name="SDMMC common stack" devices="MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="false" type="middleware">
      <source path="middleware/sdmmc/common" target_path="sdmmc/src" type="src">
        <files mask="fsl_sdmmc_common.c"/>
      </source>
      <source path="middleware/sdmmc/common" target_path="sdmmc/inc" type="c_include">
        <files mask="fsl_sdmmc_common.h"/>
        <files mask="fsl_sdmmc_spec.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.host.sdhc.MK82F25615" name="sdmmc_host_sdhc" brief="Middleware sdmmc host sdhc" version="2.3.0" full_name="Middleware sdmmc host sdhc" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <any_of>
          <component_dependency value="middleware.sdmmc.host.sdhc.interrupt.MK82F25615"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.polling.MK82F25615"/>
        </any_of>
      </dependencies>
      <source path="middleware/sdmmc/host/sdhc" target_path="sdmmc/host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/host/sdhc" target_path="sdmmc/host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.host.sdhc.interrupt.MK82F25615" name="sdmmc_host_sdhc_inetrrupt" brief="Middleware sdmmc host sdhc interrupt" version="2.3.0" full_name="Middleware sdmmc host sdhc interrupt" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK82F25615"/>
          <component_dependency value="middleware.sdmmc.osa.bm.MK82F25615"/>
          <component_dependency value="platform.drivers.sdhc.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/sdmmc/host/sdhc" target_path="sdmmc/host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/host/sdhc" target_path="sdmmc/host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source path="middleware/sdmmc/host/sdhc/non_blocking" target_path="sdmmc/host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
    </component>
    <component id="middleware.sdmmc.host.sdhc.polling.MK82F25615" name="sdmmc_host_sdhc_polling" brief="Middleware sdmmc host sdhc polling" version="2.3.0" full_name="Middleware sdmmc host sdhc polling" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK82F25615"/>
          <component_dependency value="middleware.sdmmc.osa.bm.MK82F25615"/>
          <component_dependency value="platform.drivers.sdhc.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/sdmmc/host/sdhc" target_path="sdmmc/host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/host/sdhc/blocking" target_path="sdmmc/host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source path="middleware/sdmmc/host/sdhc" target_path="sdmmc/host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.mmc.MK82F25615" name="mmc" brief="Middleware sdmmc mmc" version="2.3.0" full_name="SDMMC mmc stack" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK82F25615"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/sdmmc/mmc" target_path="sdmmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/mmc" target_path="sdmmc/src" type="src">
        <files mask="fsl_mmc.c"/>
      </source>
      <source path="middleware/sdmmc/mmc" target_path="sdmmc/inc" type="c_include">
        <files mask="fsl_mmc.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.osa.bm.MK82F25615" name="sdmmc_osa_bm" brief="Middleware sdmmc osa_bm" version="2.3.0" full_name="SDMMC common stack" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="component.osa_bm.MK82F25615"/>
      </dependencies>
      <source path="middleware/sdmmc/osa" target_path="sdmmc/osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source path="middleware/sdmmc/osa" target_path="sdmmc/osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.sd.MK82F25615" name="sd" brief="Middleware sdmmc sd" version="2.3.0" full_name="SDMMC sd stack" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK82F25615"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/sdmmc/sd" target_path="sdmmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/sd" target_path="sdmmc/src" type="src">
        <files mask="fsl_sd.c"/>
      </source>
      <source path="middleware/sdmmc/sd" target_path="sdmmc/inc" type="c_include">
        <files mask="fsl_sd.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.sdio.MK82F25615" name="sdio" brief="Middleware sdmmc sdio" version="2.3.0" full_name="SDMMC sdio stack" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK82F25615"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/sdmmc/sdio" target_path="sdmmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/sdio" target_path="sdmmc/src" type="src">
        <files mask="fsl_sdio.c"/>
      </source>
      <source path="middleware/sdmmc/sdio" target_path="sdmmc/inc" type="c_include">
        <files mask="fsl_sdio.h"/>
      </source>
    </component>
    <component id="middleware.sdmmc.sdspi.MK82F25615" name="sdspi" brief="Middleware sdmmc sdspi" version="2.1.4" full_name="SDMMC sdspi stack" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="Memories/SDMMC Stack" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="platform.drivers.dspi.MK82F25615"/>
      </dependencies>
      <source path="middleware/sdmmc/common" target_path="sdmmc/inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
      </source>
      <source path="middleware/sdmmc/sdspi" target_path="sdmmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/sdmmc/sdspi" target_path="sdmmc/src" type="src">
        <files mask="fsl_sdspi.c"/>
      </source>
      <source path="middleware/sdmmc/sdspi" target_path="sdmmc/inc" type="c_include">
        <files mask="fsl_sdspi.h"/>
      </source>
    </component>
    <component id="middleware.usb.common_header.MK82F25615" name="USB Common Header" brief="Middleware usb common_header" version="2.6.0" full_name="USB Common Header" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="USB/USB Common Header" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="component.osa.MK82F25615"/>
      </dependencies>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
    </component>
    <component id="middleware.usb.device.common_header.MK82F25615" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.6.0" full_name="USB Device Common Header" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="USB/USB Device" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MK82F25615"/>
          <component_dependency value="middleware.usb.common_header.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
    </component>
    <component id="middleware.usb.otg.common_header.MK82F25615" name="USB OTG Common Header" brief="Middleware usb otg common_header" version="2.6.0" full_name="USB OTG Common Header" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" category="USB/USB OTG" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MK82F25615"/>
          <component_dependency value="middleware.usb.common_header.MK82F25615"/>
        </all>
      </dependencies>
      <source path="middleware/usb/otg" target_path="usb/otg" type="c_include">
        <files mask="usb_otg.h"/>
        <files mask="usb_otg_oci.h"/>
        <files mask="usb_otg_peripheral.h"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MK82F25615" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MK82FN256xxx15" user_visible="true" type="utilities">
      <source toolchain="armgcc" path="devices/MK82F25615/utilities" target_path="utilities" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MK82F25615" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MK82F25615" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MK82F25615"/>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MK82F25615/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MK82F25615/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MK82F25615/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MK82F25615" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK82F25615"/>
      </dependencies>
      <source path="devices/MK82F25615/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MK82F25615/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MK82F25615" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MK82FN256xxx15" device_cores="core0_MK82FN256xxx15" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MK82F25615"/>
          <component_dependency value="component.lists.MK82F25615"/>
          <component_dependency value="platform.drivers.common.MK82F25615"/>
        </all>
      </dependencies>
      <source path="devices/MK82F25615/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MK82F25615/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
